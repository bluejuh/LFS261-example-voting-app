pipeline {
    agent none

    stages{
        stage("build"){
            agent {
                docker {
                    image 'node:8.16.0-alpine'
                }
            }

            when{
                changeset "**/result/**"
            }

            steps{
                echo 'building Result NodeJS Application'
                dir('result'){
                    sh 'npm install'
                }
            }
        }
        stage("test"){
            agent {
                docker {
                    image 'node:8.16.0-alpine'
                }
            }

            when{
                changeset "**/result/**"
            }

            steps{
                echo 'Running Tests on Result NodeJS Application'
                dir('result'){
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
        stage('docker-package') {
            agent any
            when {
                changeset '**/result/**'
                branch 'master'
            }
            steps {
                echo 'Packaging result app with docker'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def resultImage = docker.build("facefrontletsgo/result:v${env.BUILD_ID}", './result')
                        resultImage.push()
                        resultImage.push("${env.BRANCH_NAME}")
                        resultImage.push('latest')
                    }
                }
            }
        }
    }
    post{
        always{
            echo 'Building multibranch pipeline for Result NodeJS Application is completed..'
        }
        failure{
            slackSend (channel: "#ci-cd", message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
        success{
            slackSend (channel: "#ci-cd", message: "Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER}")
        }
    }
}

